@{
    ViewBag.Title = "CurrentEventDashboard";
    Layout = "~/Views/Shared/_LayoutBlack.cshtml";
}
<div class="row alertRow" id="eventDiv">
    <div style="float:left;display:flex;" class="col-md-4 col-sm-12 col-xs-12">
        <p class="eventText" style="color: white;">
            EVENEMENT
            <span id="eventState"> EN COURS </span>
        </p>
    </div>
    <div style="float:left;display:flex;" class="col-md-4 col-sm-12 col-xs-12">
        <p class="eventText" style="color: white;" href="@Url.Action("CurrentEventDashboard", "Home")">
            EVENEMENT
            <span id="eventState"> EN COURS </span>
        </p>
    </div>
    <div id="searchInput" class="eventText col-md-4 col-sm-12 col-xs-12" style="color:white;display:flex;flex-flow:row-reverse;">
        NOM DU CONCESSIONNAIRE
    </div>

</div>
<br />
<br />

<div class="mainCurrentRow">
    <div id="barsContainer">
        <div style="margin:15px;">
            <div class="titleContainer">
                <img src="~/Content/Images/face bars.png" />
                <p class="localTitle">Appels</p>
            </div>
            <div class="graph">
                <canvas id="barsCanvas"></canvas>
                <br />
                <br />
                <br />
                <br />
                <div id="legend-container"> </div>
            </div>

        </div>
    </div>




    <div class="wheelsContainer">
        
        <div class="donutsDiv">
            <div class="row donutsTitle">
                <img src="~/Content/Images/ICONES_SVG_Base_Couleurs_RDV.svg" height="50" width="50" />
                <p class="localTitle" style="color: #25b34b;">Rendez-vous / jour</p>
            </div>
            <br />
            <div class="donutsContainer">
                <div class="UniqueDonutContainer">
                    <div id="content">
                        <canvas id="circleRdvJour1" width="220" height="220"></canvas>
                        <div class="description">
                            <span class="number">22</span>
                        </div>
                    </div>
                    <div>
                        <p class="donutsText">Jour 1</p>
                    </div>
                </div>





                <div class="UniqueDonutContainer">
                    <div id="content">
                        <canvas id="circleRdvJour2" width="220" height="220"></canvas>
                        <div class="description">
                            <span class="number">22</span>
                        </div>
                    </div>
                    <div>
                        <p class="donutsText">Jour 2</p>
                    </div>
                </div>




                <div class="UniqueDonutContainer">
                    <div id="content">
                        <canvas id="circleRdvJour3" width="220" height="220"></canvas>
                        <div class="description">
                            <span class="number">22</span>
                        </div>
                    </div>
                    <div>
                        <p class="donutsText">Jour 3</p>
                    </div>
                </div>






                <div class="UniqueDonutContainer">
                    <div id="content">
                        <canvas id="circleRdvHorsEvt" width="220" height="220"></canvas>
                        <div class="description" style="position:absolute;">
                            <span class="number">22</span>
                        </div>
                    </div>
                    <div>
                        <p class="donutsText">Hors évènement</p>
                    </div>
                </div>
                </div>
        </div>

        <div class ="donutsDiv" style="background-color:black;border:1px white solid;width:100%;margin:15px;border-radius:15px;height:420px;">

            <div class="row donutsTitle">
                <img src="~/Content/Images/ICONES_SVG_Couleurs_Vente.svg" height="50" width="50"/>
                <p class="localTitle" style="color: #C1529E;">Ventes / jour</p>
            </div>
            <br />


            <div class="donutsContainer">
                <div class="UniqueDonutContainer">
                    <div id="content">
                        <canvas id="circleVenteJour1" width="220" height="220"></canvas>
                        <div class="description">
                            <span class="number">22</span>
                        </div>
                    </div>
                    <div>
                        <p style="text-align:center;font-size:30px;font-weight:bold;color:white;margin-top:10px;">Jour 1</p>
                    </div>
                </div>


                <div class="UniqueDonutContainer">
                    <div id="content">
                        <canvas id="circleVenteJour2" width="220" height="220"></canvas>
                        <div class="description" style="position:absolute;">
                            <span class="number">22</span>
                        </div>
                    </div>
                    <div>
                        <p style="text-align:center;font-size:30px;font-weight:bold;color:white;margin-top:10px;">Jour 1</p>
                    </div>
                </div>

                <div class="UniqueDonutContainer">
                    <div id="content">
                        <canvas id="circleVenteJour3" width="220" height="220"></canvas>
                        <div class="description" style="position:absolute;">
                            <span class="number">22</span>
                        </div>
                    </div>
                    <div>
                        <p style="text-align:center;font-size:30px;font-weight:bold;color:white;margin-top:10px;">Jour 1</p>
                    </div>
                </div>

                <div class="UniqueDonutContainer">
                    <div id="content">
                        <canvas id="circleVenteHorsEvt" width="220" height="220"></canvas>
                        <div class="description" style="position:absolute;">
                            <span class="number">22</span>
                        </div>
                    </div>
                    <div>
                        <p style="text-align:center;font-size:30px;font-weight:bold;color:white;margin-top:10px;">Jour 1</p>
                    </div>
                </div>
                </div>
        </div>
    </div>




</div>

<div class="row">
    <div class="bottomRow">

        <div class="pieContainer">
            <div class="row donutsTitle">
                <img src="~/Content/Images/ICONES_SVG_Couleurs_WaklIn_Vert.svg" height="50" width="50"  />
                <p class="localTitle" style="color: #32B9A9;">Ventes / jour</p>
            </div>
            
            <div class="rowFlex">
                <div class="pieGraph">
                    <div style="background-color:black;position: relative; height:350px; width:350px;margin-top:-30px;vertical-align:middle;">
                        <canvas id="ExplodedPieChart" width="20" height="20"></canvas>
                    </div>
                </div>
                <div class="pieTextContainer">
                    <p class="Total">24</p>
                    <div id="pieLegends">
                    </div>
                </div>
                
            </div>
        </div>





        <div class="linesChart">

            <div class="row donutsTitle">
                <img src="~/Content/Images/ICONES_SVG_Couleurs_WaklIn_Blue.svg" height="50" width="50"  />
                <p class="localTitle" style="color: #2ea6de;">Walk-In / jour</p>
            </div>


            <div id="container">
                <canvas id="lineChart" width="1050" height="330"></canvas>
            </div>


        </div>

    </div>

</div>


<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.4/Chart.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/chartjs-plugin-datalabels/0.7.0/chartjs-plugin-datalabels.min.js"></script>
@*<script src="https://cdn.jsdelivr.net/gh/emn178/chartjs-plugin-labels/src/chartjs-plugin-labels.js"> </script>*@
<script>
    var chartColors = {
        red: 'rgb(255, 99, 132)',
        orange: 'rgb(255, 159, 64)',
        yellow: 'rgb(255, 205, 86)',
        green: 'rgb(75, 192, 192)',
        blue: 'rgb(54, 162, 235)',
        purple: 'rgb(153, 102, 255)',
        grey: 'rgb(231,233,237)'
    };


    var randomScalingFactor = function () {
        return (Math.random() > 0.5 ? 1.0 : 1.0) * Math.round(Math.random() * 100);
    };
    Chart.helpers.merge(Chart.defaults.global, {
        datasets: {
            roundedBar: {
                categoryPercentage: 0.8,
                barPercentage: 0.9
            }
        }
    });
    // draws a rectangle with a rounded top
    Chart.helpers.drawRoundedTopRectangle = function (ctx, x, y, width, height, radius) {
        ctx.beginPath();
        ctx.moveTo(x + radius, y);
        // top right corner
        ctx.lineTo(x + width - radius, y);
        ctx.quadraticCurveTo(x + width, y, x + width, y + radius);
        // bottom right	corner
        ctx.lineTo(x + width, y + height);
        // bottom left corner
        ctx.lineTo(x, y + height);
        // top left
        ctx.lineTo(x, y + radius);
        ctx.quadraticCurveTo(x, y, x + radius, y);
        ctx.shadowColor = '#ec9f05';
        ctx.shadowBlur = 80;
        ctx.shadowOffsetY = 3;
        ctx.stroke();
        ctx.closePath();
    };

    Chart.elements.RoundedTopRectangle = Chart.elements.Rectangle.extend({
        draw: function () {
            var ctx = this._chart.ctx;
            var vm = this._view;
            var left, right, top, bottom, signX, signY, borderSkipped;
            var borderWidth = vm.borderWidth;

            if (!vm.horizontal) {
                // bar
                left = vm.x - vm.width / 2;
                right = vm.x + vm.width / 2;
                top = vm.y;
                bottom = vm.base;
                signX = 1;
                signY = bottom > top ? 1 : -1;
                borderSkipped = vm.borderSkipped || 'bottom';
            } else {
                // horizontal bar
                left = vm.base;
                right = vm.x;
                top = vm.y - vm.height / 2;
                bottom = vm.y + vm.height / 2;
                signX = right > left ? 1 : -1;
                signY = 1;
                borderSkipped = vm.borderSkipped || 'left';
            }

            // Canvas doesn't allow us to stroke inside the width so we can
            // adjust the sizes to fit if we're setting a stroke on the line
            if (borderWidth) {
                // borderWidth shold be less than bar width and bar height.
                var barSize = Math.min(Math.abs(left - right), Math.abs(top - bottom));
                borderWidth = borderWidth > barSize ? barSize : borderWidth;
                var halfStroke = borderWidth / 2;
                // Adjust borderWidth when bar top position is near vm.base(zero).
                var borderLeft = left + (borderSkipped !== 'left' ? halfStroke * signX : 0);
                var borderRight = right + (borderSkipped !== 'right' ? -halfStroke * signX : 0);
                var borderTop = top + (borderSkipped !== 'top' ? halfStroke * signY : 0);
                var borderBottom = bottom + (borderSkipped !== 'bottom' ? -halfStroke * signY : 0);
                // not become a vertical line?
                if (borderLeft !== borderRight) {
                    top = borderTop;
                    bottom = borderBottom;
                }
                // not become a horizontal line?
                if (borderTop !== borderBottom) {
                    left = borderLeft;
                    right = borderRight;
                }
            }

            // calculate the bar width and roundess
            var barWidth = Math.abs(left - right);
            var roundness = this._chart.config.options.barRoundness || 0.5;
            var radius = barWidth * roundness * 0.5;

            // keep track of the original top of the bar
            var prevTop = top;

            // move the top down so there is room to draw the rounded top
            top = prevTop + radius;
            var barRadius = top - prevTop;

            ctx.beginPath();
            ctx.fillStyle = vm.backgroundColor;
            ctx.strokeStyle = vm.borderColor;
            ctx.lineWidth = borderWidth;

            // draw the rounded top rectangle
            Chart.helpers.drawRoundedTopRectangle(ctx, left, (top - barRadius + 1), barWidth, bottom - prevTop, barRadius);

            ctx.fill();
            if (borderWidth) {
                ctx.stroke();
            }

            // restore the original top value so tooltips and scales still work
            top = prevTop;
        },
    });

    Chart.defaults.roundedBar = Chart.helpers.clone(Chart.defaults.bar);

    Chart.controllers.roundedBar = Chart.controllers.bar.extend({
        dataElementType: Chart.elements.RoundedTopRectangle
    });


    var ctx = document.getElementById("barsCanvas").getContext("2d");

    var green_blue_gradient = ctx.createLinearGradient(0, 0, 0, 600);
    green_blue_gradient.addColorStop(1, '#f07654');
    green_blue_gradient.addColorStop(0, '#f5df2e');



    var purple_orange_gradient = ctx.createLinearGradient(0, 0, 0, 600);
    purple_orange_gradient.addColorStop(0, '#fe5858');
    purple_orange_gradient.addColorStop(1, '#ee9617');

    var orange_purple_gradient = ctx.createLinearGradient(0, 0, 0, 600);
    orange_purple_gradient.addColorStop(0, '#ee9617');
    orange_purple_gradient.addColorStop(1, '#fe5858');


    var orange_red_gradient = ctx.createLinearGradient(0, 0, 0, 600);
    orange_red_gradient.addColorStop(0, '#fc9842');
    orange_red_gradient.addColorStop(1, '#f5d020');



    //Create gradient
    var purpleGradienta = ctx.createLinearGradient(0, 500, 0, 0);
    purpleGradienta.addColorStop(0, '#861657');
    purpleGradienta.addColorStop(1, '#ffa69e');

    //Create gradient
    var purpleGradient = ctx.createLinearGradient(0, 500, 0, 0);
    purpleGradient.addColorStop(0, '#ffa69e');
    purpleGradient.addColorStop(1, '#861657');

    var myBar = new Chart(ctx, {
        type: 'roundedBar',
        data: {
            labels: ["Appels", "Rejoints", "Rendez-Vous"],
            datasets: [{
                label: 'Consultants de ventes privées',
                barPercentage: 0.6,
                backgroundColor: green_blue_gradient,
                hoverBackgroundColor: 'yellow',
                hoverBorderWidth: 2,
                hoverBorderColor: 'white',
                barPercentage: 0.4,
                data: [
                    85,
                    22,
                    74,
                ]
            }, {
                label: 'Centres d\'appels',
                backgroundColor: orange_red_gradient,
                hoverBackgroundColor: 'orange',
                hoverBorderWidth: 2,
                hoverBorderColor: 'white',
                barPercentage: 0.4,
                data: [62, 75, 60]
            }, {
                label: 'Totaux',
                backgroundColor: purple_orange_gradient,
                hoverBackgroundColor: '#ff4e00',
                hoverBorderWidth: 2,
                hoverBorderColor: 'white',
                barPercentage: 0.4,
                data: [
                    34,
                    45,
                    55,
                ]
            }]
        },
        options: {
            //cornerRadius: 8,
            plugins: {
                datalabels: {
                    align: 'end',
                    anchor: 'end',
                    color: 'white',
                    font: {
                        weight: 'bold',
                        size: 15
                    },

                    formatter: function (value, context) {
                        return value;
                    }
                }
            },

            legend: {
                display: false,
                position: 'bottom'
            },
            legendCallback: function (chart) {
                var text = [];

                text.push('<ul class="' + chart.id + '-legend">');
                for (var i = 0; i < chart.data.datasets.length; i++) {
                    text.push('<li style="list-style-type:none;"><div class="legendValue"><span style="border-radius :15px;margin-right:15px;background-color:' + chart.data.datasets[i].hoverBackgroundColor + '">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>');

                    if (chart.data.datasets[i].label) {
                        text.push('<span class="label" style="color:white;">' + chart.data.datasets[i].label + '</span><br> <br>');
                    }

                    text.push('</div></li><div class="clear"></div>');
                }

                text.push('</ul>');

                return text.join('');
            },

            responsive: true,
            barRoundness: 1,
            //legend: {
            //    position: 'bottom',
            //    fullWidth: true,
            //    labels: {
            //        boxWidth: 10,
            //        fontSize: 15,
            //        padding: 50,
            //        maxRotation: 90,
            //        minRotation: 90,
            //        align: 'left',
            //        fontColor: 'white',
            //        fontStyle: 'bold',
            //    }
            //},
            title: {
                display: false,
                text: "Chart.js - Bar Chart with Rounded Tops and customized grid"
            },
            scales: {
                xAxes: [{
                    ticks: {
                        fontSize: 20,
                        fontStyle: 'bold',
                        fontColor: 'white',
                    },
                    gridLines: {
                        display: false,
                        drawBorder: true,
                        color: 'white'
                    },

                }],
                yAxes: [{
                    display: true,
                    gridLines: {
                        drawBorder: false,
                        color: 'grey'
                    },
                    ticks: {
                        userCallback: function (item, index) {
                            if (index % 2) return item;
                            return '';
                        },

                        min: 0,
                        stepSize: 10,
                        padding: 10,
                        fontSize: 15,
                        fontStyle: 'Bold',
                    }
                }],
                animation: {
                    duration: 1,
                    easing: 'linear'
                },
            }
        }
    });
    //document.getElementById('js-legend').innerHTML = myBar.generateLegend();
    // Create our legend
    $("#legend-container").html(myBar.generateLegend());



    //Create gradient
    var gradienta = ctx.createLinearGradient(0, 500, 0, 0);
    gradienta.addColorStop(0, '#31B8A5');
    gradienta.addColorStop(1, '#24B24A');

    //Create gradient
    var gradient = ctx.createLinearGradient(0, 500, 0, 0);
    gradient.addColorStop(0, '#24B24A');
    gradient.addColorStop(1, '#31B8A5');

    var circleRdvJour1 = {
        x: 110,
        y: 110,
        radius: 80,
        angleStartArc: 1.5 * Math.PI,
        angleEndArc: 0 * Math.PI,
        wasInside: false,
        finish: 25, // Finish (in %)
        gradientaColor: gradienta,
        gradientColor: gradient,
        shadowColor: 'green',
        curr: 0, // Current position (in %)
        circum: Math.PI * 2
    }
    var circleRdvJour2 = {
        x: 110,
        y: 110,
        radius: 80,
        angleStartArc: 1.5 * Math.PI,
        angleEndArc: 0 * Math.PI,
        wasInside: false,
        finish: 25, // Finish (in %)
        gradientaColor: gradienta,
        gradientColor: gradient,
        shadowColor: 'green',
        curr: 0, // Current position (in %)
        circum: Math.PI * 2
    }

    var circleRdvJour3 = {
        x: 110,
        y: 110,
        radius: 80,
        angleStartArc: 1.5 * Math.PI,
        angleEndArc: 0 * Math.PI,
        wasInside: false,
        finish: 25, // Finish (in %)
        gradientaColor: gradienta,
        gradientColor: gradient,
        shadowColor: 'green',
        curr: 0, // Current position (in %)
        circum: Math.PI * 2
    }

    var circleRdvHorsEvt = {
        x: 110,
        y: 110,
        radius: 80,
        angleStartArc: 1.5 * Math.PI,
        angleEndArc: 0 * Math.PI,
        wasInside: false,
        finish: 25, // Finish (in %)
        gradientaColor: gradienta,
        gradientColor: gradient,
        shadowColor: 'green',
        curr: 0, // Current position (in %)
        circum: Math.PI * 2
    }


    var circleVenteJour1 = {
        x: 110,
        y: 110,
        radius: 80,
        angleStartArc: 1.5 * Math.PI,
        angleEndArc: 0 * Math.PI,
        wasInside: false,
        finish: 25, // Finish (in %)
        gradientaColor: purpleGradient,
        gradientColor: purpleGradient,
        shadowColor: '#a4508b',
        curr: 0, // Current position (in %)
        circum: Math.PI * 2
    }

    var circleVenteJour2 = {
        x: 110,
        y: 110,
        radius: 80,
        angleStartArc: 1.5 * Math.PI,
        angleEndArc: 0 * Math.PI,
        wasInside: false,
        finish: 25, // Finish (in %)
        gradientaColor: purpleGradient,
        gradientColor: purpleGradient,
        shadowColor: '#a4508b',
        curr: 0, // Current position (in %)
        circum: Math.PI * 2
    }

    var circleVenteJour3 = {
        x: 110,
        y: 110,
        radius: 80,
        angleStartArc: 1.5 * Math.PI,
        angleEndArc: 0 * Math.PI,
        wasInside: false,
        finish: 25, // Finish (in %)
        gradientaColor: purpleGradient,
        gradientColor: purpleGradient,
        shadowColor: '#a4508b',
        curr: 0, // Current position (in %)
        circum: Math.PI * 2
    }

    var circleVenteHorsEvt = {
        x: 110,
        y: 110,
        radius: 80,
        angleStartArc: 1.5 * Math.PI,
        angleEndArc: 0 * Math.PI,
        wasInside: false,
        finish: 25, // Finish (in %)
        gradientaColor: purpleGradient,
        gradientColor: purpleGradient,
        shadowColor: '#a4508b',
        curr: 0, // Current position (in %)
        circum: Math.PI * 2
    }
    //Create gradient
    var gradienta = ctx.createLinearGradient(0, 500, 0, 0);
    gradienta.addColorStop(0, '#5aff15');
    gradienta.addColorStop(1, '#01baef');

    //Create gradient
    var gradient = ctx.createLinearGradient(0, 500, 0, 0);
    gradient.addColorStop(0, '#01baef');
    gradient.addColorStop(1, '#20bf55');

    // Enables browser-decided smooth animation (60fps)
    var raf = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;
    window.requestAnimationFrame = raf;





    this.drawCircle = function (circle, id, isInside, draw_to) {

        var canvas = document.getElementById(id);

        ctx = canvas.getContext('2d');



        ctx.clearRect(0, 0, canvas.width, canvas.height);
        ctx.beginPath();
        ctx.arc(circle.x, circle.x, circle.radius, 0, 2 * Math.PI, false);
        ctx.lineWidth = 30;
        ctx.strokeStyle = 'black';
        ctx.shadowColor = circle.shadowColor;
        ctx.shadowBlur = 20;
        ctx.shadowOffsetY = 3;
        ctx.stroke();

        ctx.stroke();

        //Draw arc
        ctx.beginPath();
        ctx.arc(circle.x, circle.x, circle.radius, circle.angleStartArc, draw_to);
        ctx.strokeStyle = isInside ? circle.gradientColor : circle.gradientaColor;
        //ctx.strokeStyle =circle.gradientaColor;
        ctx.lineWidth = 30;
        ctx.lineCap = 'round';
        ctx.stroke();
        circle.wasInside = isInside;

        // Increment percent
        circle.curr++;
        // Animate until end
        if (circle.curr < circle.finish + 1) {
            // Recursive repeat this function until the end is reached
            requestAnimationFrame(function () {
                drawCircle(circle, id, isInside, circle.circum * circle.curr / 100 + circle.angleStartArc);
            });
        }
        else {
            ctx.closePath();
        }

    }




    drawCircle(circleRdvJour1, 'circleRdvJour1', false);
    drawCircle(circleRdvJour2, 'circleRdvJour2', false);
    drawCircle(circleRdvJour3, 'circleRdvJour3', false);
    drawCircle(circleRdvHorsEvt, 'circleRdvHorsEvt', false);

    drawCircle(circleVenteJour1, 'circleVenteJour1', false);
    drawCircle(circleVenteJour2, 'circleVenteJour2', false);
    drawCircle(circleVenteJour3, 'circleVenteJour3', false);
    drawCircle(circleVenteHorsEvt, 'circleVenteHorsEvt', false);




    


    /********* Line charts display and configuration  ************/

    Chart.defaults.global.plugins.datalabels.display = false;


    var dataPack1 = [50, 75, 80, 100, 75];
    var dataPack2 = [30, 50, 130, 140, 90];

    var ctx = document.getElementById("lineChart");

    const colors = {
        green: {
            fill: '#e0eadf',
            stroke: '#5eb84d',
        },
        lightBlue: {
            stroke: '#6fccdd',
        },
        darkBlue: {
            fill: '#92bed2',
            stroke: '#3282bf',
        },
        purple: {
            fill: '#8fa8c8',
            stroke: '#75539e',
        },
    };

    var data = {
        labels: ["", "Jour 2", "Jour 3", "Jour 4", ""],
        datasets: [
            {
                borderCapStyle: 'round',
                label: "Blue",
                fill: true,
                backgroundColor: 'rgba(46, 166, 222, 0.2)',
                pointBackgroundColor: colors.lightBlue.stroke,
                borderColor: 'rgba(46, 166, 222, 0.8)',
                borderWidth: 10,
                pointHighlightStroke: colors.lightBlue.stroke,
                pointRadius: 0,
                hoverBorderWidth: 5,
                hoverBorderColor: colors.lightBlue.stroke,
                data: dataPack2
            },
            {
                borderCapStyle: 'round',
                label: "Red",
                fill: true,
                backgroundColor: 'rgba(50, 185, 169,0.2)',
                pointBackgroundColor: 'rgba(50, 185, 169,0.8)',
                borderColor: 'rgba(50, 185, 169,0.8)',
                borderWidth: 10,
                pointHighlightStroke: colors.lightBlue.strokev,
                pointRadius: 0,
                hoverBorderWidth: 5,
                hoverBorderColor: colors.lightBlue.strokev,
                data: dataPack1,
            }
        ]
    };

    var lineOptions = {
        layout: {
            padding: {
                left: 15,
                right: 30,
                top: 15,
                bottom: 15
            }
        },
        scales: {
            xAxes: [{
                stacked: false,
                min: 0,
                ticks: {
                    fontSize: 20,
                    fontStyle: 'bold',
                    fontColor: 'white',
                },
                gridLines: {
                    display: false,
                    drawBorder: true,
                    color: 'white'
                },
            }],
            yAxes: [{
                stacked: false,
                display: true,
                min: 0,
                ticks: {
                    min: 0,
                    stepSize: 15,
                    padding: 10,
                    fontSize: 20,
                    fontStyle: 'bold',
                },

                gridLines: {
                    drawBorder: false,
                    color: 'grey',
                    lineWidth: 0.5,
                },
            }],
            animation: {
                duration: 750,
                easing: 'linear'
            },
        },
        legend: {
            display: false,
        },
        stepped: false,
        plugins: {
            //dataLabels: {
            //    display : false
            //}
        }
    }

    var myLineChart = new Chart(ctx, {
        type: 'line',
        data: data,
        options: lineOptions,
    });


    /****************** Exploded pie chart display and animation ************/

    var ctx = document.getElementById("ExplodedPieChart");

    var draw = Chart.controllers.pie.prototype.draw;
    Chart.controllers.pie = Chart.controllers.doughnut.extend({
        draw: function () {
            draw.apply(this, arguments);
            let ctx = this.chart.chart.ctx;
            let _fill = ctx.fill;
            ctx.fill = function () {
                ctx.save();
                ctx.shadowColor = '#32B9A9';
                ctx.shadowBlur = 120;
                _fill.apply(this, arguments)
                ctx.restore();
            }
        }
    });


    var myPie = new Chart(ctx, {
        type: 'pie',
        data: {
            labels: ["Red", "Blue"],
            datasets: [{
                label: '# of Votes',
                data: [3, 9],
                backgroundColor: ['#2EA6DE', '#32B9A9'],
                borderColor: ['black', 'black'],
                borderWidth: [10, 10],
                weight: 25,
            }],
        },

        options: {
            reponsisve: true,
            maintainAspectRatio: false,
            legend: {
                display: false,
                position: 'right'
            },
            legendCallback: function (chart) {
                var text = [];

                text.push('<ul class="' + chart.id + '-legend">');
                for (var i = 0; i < chart.data.labels.length; i++) {
                    text.push('<li style="list-style-type:none;"><div class="legendValue"><span style="border-radius :15px;margin-right:15px;background-color:' + chart.data.datasets[0].backgroundColor[i] + '">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>');

                    if (chart.data.labels[i]) {
                        text.push('<span class="label" style="color:white;">' + chart.data.labels[i] + '</span><br> <br>');
                    }

                    text.push('</div></li><div class="clear"></div>');
                }

                text.push('</ul>');

                return text.join('');
            },


            layout: {
                padding: {
                    left: 0,
                    right: 0,
                    top: 50,
                    bottom: 50
                }
            },
            plugins: {
                //labels: {
                //    render: 'value',
                //    fontColor: 'white',
                //    fontSize: 30,
                //    fontStyle: 'bold'
                //}
                datalabels: {
                    display : true ,
                    color: 'white',
                    font: {
                        weight: 'bold',
                        size : 35
                    },
                    padding : 6,
                }
            }
        }
    });

    var defaultRadiusMyChart;
    var addRadiusMargin = 10;
    var currentSelectedPieceLabel = "";

    $(document).ready(function () {
        defaultRadiusMyChart = myChart.outerRadius;

        explodePieceOnSelect();
    });

    function explodePieceOnSelect() {
        $('#ExplodedPieChart').on('click', function (event) {
            var activePoints = myChart.getElementsAtEvent(event);

            if (activePoints.length > 0) {
                //get the internal index of slice in pie chart
                var clickedElementindex = activePoints[0]["_index"];

                //get specific label by index
                var clickedLabel = myChart.data.labels[clickedElementindex];

                if (currentSelectedPieceLabel.toUpperCase() == "") {
                    // no piece selected yet, save piece label
                    currentSelectedPieceLabel = clickedLabel.toUpperCase();

                    // clear whole pie
                    myChart.outerRadius = defaultRadiusMyChart;
                    myChart.update();

                    // update selected pie
                    activePoints[0]["_model"].outerRadius = defaultRadiusMyChart + addRadiusMargin;
                }
                else {
                    if (clickedLabel.toUpperCase() == currentSelectedPieceLabel.toUpperCase()) {
                        // already selected piece clicked, clear the chart
                        currentSelectedPieceLabel = "";

                        // clear whole pie
                        myChart.outerRadius = defaultRadiusMyChart;
                        myChart.update();

                        // update selected pie
                        activePoints[0]["_model"].outerRadius = defaultRadiusMyChart;
                    }
                    else {
                        // other piece clicked
                        currentSelectedPieceLabel = clickedLabel.toUpperCase();

                        // clear whole pie
                        myChart.outerRadius = defaultRadiusMyChart;
                        myChart.update();

                        // update the newly selected piece
                        activePoints[0]["_model"].outerRadius = defaultRadiusMyChart + addRadiusMargin;
                    }
                }
                myChart.render(200, false);
            }
        });
    }
    $("#pieLegends").html(myPie.generateLegend());
</script>