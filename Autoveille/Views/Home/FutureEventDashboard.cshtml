<div class="row mainRow">
    <div class="col" style="margin-left:35px;width:50%;">
        <div class="row flip-date">
            <div id="calendar-Label" class="col-lg-4 col-md-12 col-sm-12 col-xs-12">
                <img src="~/Content/Images/Layout/Calendar.png" />
                <text style="color: #ed145b"> Date </text>
            </div>
            <div class="tick flipCcontainer col-lg-8 col-md-12 col-sm-12 col-xs-12" data-did-init="TickInit">
                <div data-repeat="true" data-layout="horizontal fit" data-transform="preset(d, h, m, s) -> delay">
                    <div class="tick-group">
                        <div data-key="value" data-transform="pad(00)">
                            <span data-view="flip"></span>
                        </div>
                        <span data-key="label" data-view="text" class="tick-label"></span>
                    </div>
                </div>
            </div>

            @*<div id="mattick" class="flipContainer col-lg-8 col-md-12 col-sm-12 col-xs-12">

            </div>*@


        </div>

        <br />

        @*<div class="row flip-date">
            <div class="col-md-4 col-sm-12 col-xs-12 stats">
                <text class="text" style="color: #25b34b;"> Rendez-vous </text><br />
                <text class="number rdvPercent"> @Model.RDV</text><text class="number"> %</text>
            </div>
            <div class="col-md-8 col-sm-12 col-xs-12" id="content">
                <canvas class="circlee" id="rendezVous-circle" width="350" height="350"></canvas>
                <img id="canvaContent" src="~/Content/Images/ICONES_SVG_Base_Couleurs_RDV.svg" />
            </div>
        </div>*@

        <div class="row flip-date" style="display:block;">
            <div class="stats">
                <i class="fas fa-stopwatch fa-3x" style="color:#25b34b;"></i>
                <text class="text" style="color: #25b34b;"> Compte à Rebours </text><br />
            </div>
            <div id="content" class="tick countdownContainer" style="margin-top:2em;" data-did-init="handleTickInit">
                <div data-repeat="true" data-layout="horizontal fit" data-transform="preset(d, h, m, s) -> delay">
                    <div class="tick-group">
                        <div data-key="value" data-transform="pad(00)">
                            <span data-view="flip"></span>
                        </div>
                        <span data-key="label" data-view="text" class="tick-label"></span>
                    </div>
                </div>

            </div>
        </div>
    </div>


    <div class="col mainSecondColumn">
        <div class="flip-date-container" style="width:100%;margin-left:-20px;">
            <div class="row flip-date-inside">
                <div class="col-md-4 col-sm-12 col-xs-12 stats">
                    <text class="text" style="color: #e11b22;"> Potentiel </text><br /><br />
                    <text class="number"> @Model.Potentiels</text>
                </div>
                <div class="col-md-8 col-sm-12 col-xs-12" id="content">
                    @*<img id="radarImg" src="~/Content/Images/Layout/radar.png" />*@
                    <div id="circleBorder">
                        <ul class="radar">
                            <li></li>
                            <li></li>
                            <li></li>
                        </ul>
                        <div id="point0"></div>
                        <div id="point1"></div>
                        <div id="point2"></div>
                        <div id="point3"></div>
                        <div id="point4"></div>
                    </div>

                </div>
            </div>

            <br />

            <div class="row flip-date-inside">
                <div class="col-md-4 col-sm-12 col-xs-12 stats">
                    <text class="text" style="color: #fbbb29;"> Opportunités </text><br />
                    <text class="number opportunitiesPercent">@Model.Oportunites</text><text class="number"> %</text>
                </div>
                <div class="col-md-8 col-sm-12 col-xs-12" id="content">
                    <canvas class="circlee" id="oppoo-circle" width="350" height="350"></canvas>
                    @*<div class="description" style="text-align: center; font-size: 30px; font-weight: 200; position: relative; color: #fff;">*@
                    <img id="canvaContent" src="~/Content/Images/ICONES_SVG_Couleurs_Opportunite╠üs.svg" />
                    @*</div>*@
                </div>
            </div>
        </div>
    </div>


</div>


<script>
    $(document).ready(function () {
        var opportunities = $('.opportunitiesPercent').text();

        var oppoCanvas = document.getElementById('oppoo-circle');
        var ctx = oppoCanvas.getContext('2d');
        var $canvas = $("#oppoo-circle");
        var canvasOffset = $canvas.offset();
        var offsetX = canvasOffset.left;
        var offsetY = canvasOffset.top;
        var scrollX = $canvas.scrollLeft();
        var scrollY = $canvas.scrollTop();

        //Create gradient
        var yellowGradienta = ctx.createLinearGradient(0, 500, 0, 0);
        yellowGradienta.addColorStop(0, '#f5df2e');
        yellowGradienta.addColorStop(1, '#f07654');

        //Create gradient
        var yellowGradient = ctx.createLinearGradient(0, 500, 0, 0);
        yellowGradient.addColorStop(0, '#f07654');
        yellowGradient.addColorStop(1, '#f5df2e');

        var oppooCircle = {
            x: 170,
            y: 170,
            radius: 100,
            angleStartArc: 1.5 * Math.PI,
            angleEndArc: 0 * Math.PI,
            wasInside: false,
            finish: parseInt(opportunities), // Finish (in %)
            gradientColor: yellowGradienta,
            gradientaColor: yellowGradient,
            curr: 0, // Current position (in %)
            circum: Math.PI * 2
        }

        //console.log(oppooCircle.finish);
        drawOppooCircle(oppooCircle, false);
       // TickInit(tick);
        function drawOppooCircle(circle, isInside, draw_to) {
            var ctx = oppoCanvas.getContext('2d');
            ctx.clearRect(0, 0, oppoCanvas.width, oppoCanvas.height);
            //Draw circle
            ctx.beginPath();
            ctx.arc(circle.x, circle.x, circle.radius, 0, 2 * Math.PI, false);
            ctx.lineWidth = 30;
            ctx.strokeStyle = 'black';
            ctx.shadowColor = '#a57b0d';
            ctx.shadowBlur = 50;
            ctx.shadowOffsetY = 3;
            ctx.stroke();

            ctx.stroke();

            //Draw arc
            ctx.beginPath();
            ctx.arc(circle.x, circle.x, circle.radius, circle.angleStartArc, draw_to);
            ctx.strokeStyle = isInside ? circle.gradientColor : circle.gradientaColor;
            // ctx.strokeStyle =circle.gradientaColor;
            ctx.lineWidth = 30;
            ctx.lineCap = 'round';
            ctx.stroke();
            circle.wasInside = isInside;

            // Increment percent
            circle.curr++;
            // Animate until end
            if (circle.curr < circle.finish + 1) {
                // Recursive repeat this function until the end is reached
                requestAnimationFrame(function () {
                    drawOppooCircle(circle, isInside, circle.circum * circle.curr / 100 + circle.angleStartArc);
                });
            }

        }



    });


    //var supported = Tick.supported;
    //console.log(supported);

    //sconsole.log(tick);
    function TickInit(tick) {
        // set language
        var locale = {
            YEAR_PLURAL: 'ANNEES',
            YEAR_SINGULAR: 'Ans',
            MONTH_PLURAL: 'Mois',
            MONTH_SINGULAR: 'MOIS',
            WEEK_PLURAL: 'Semaines',
            WEEK_SINGULAR: 'Semaine',
            DAY_PLURAL: 'JOURS',
            DAY_SINGULAR: 'Jour',
            HOUR_PLURAL: 'Heures',
            HOUR_SINGULAR: 'Heure',
            MINUTE_PLURAL: 'Minutes',
            MINUTE_SINGULAR: 'Minute',
            SECOND_PLURAL: 'Secondes',
            SECOND_SINGULAR: 'Seconde',
            MILLISECOND_PLURAL: 'Millisecondes',
            MILLISECOND_SINGULAR: 'Milliseconde'
        };

        for (var key in locale) {
            if (!locale.hasOwnProperty(key)) { continue; }
            tick.setConstant(key, locale[key]);
        }



        var dd = Tick.helper.date();
        //console.log("here is new dd " + dd);
        tick.value = [dd.getDate(), dd.getMonth() + 1, dd.getFullYear()];
        //console.log("my value is :  " + tick.value);

    }


    function handleTickInit(tick) {
        var counter = Tick.count.down('2022-01-01T00:00:00+01:00');

        counter.onupdate = function (value) {
            tick.value = value;
        };

        counter.onended = function () {
            // redirect, uncomment the next line
            // window.location = 'my-location.html'

            // hide counter, uncomment the next line
            // tick.root.style.display = 'none';

            // show message, uncomment the next line
            // document.querySelector('.tick-onended-message').style.display = '';
        };
    }

    //var element = document.querySelector('.flipContainer');
    //var tick = Tick.DOM.create(element, {
    //    //value: 1000,
    //    didInit: function (tick) {
    //        //console.log(tick);
    //        TickInit(tick);
    //    },
    //    // repeater : 
    //});


    var element = document.querySelector('.flipCcontainer');
    var tick = Tick.DOM.create(element, {
        //value: 1000,
        didInit: function (tick) {
            //console.log(tick);
            TickInit(tick);
        },
       // repeater : 
    });

    var element = document.querySelector('.countdownContainer');
    var tick = Tick.DOM.create(element, {
        //value: 1000,
        didInit: function (tick) {
            //console.log(tick);
            handleTickInit(tick);
        },
        // repeater : 
    });
</script>