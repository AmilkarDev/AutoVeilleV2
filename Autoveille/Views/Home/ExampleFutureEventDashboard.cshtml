
@{
    ViewBag.Title = "ExampleFutureEventDashboard";
    Layout = "~/Views/Shared/_LayoutBlack.cshtml";
}

<div class="row mainRow">
    <div class="col" style="margin-left:35px;width:50%;">
        <div class="row flip-date">
            <div id="calendar-Label" class="col-lg-4 col-md-12 col-sm-12 col-xs-12">
                <img src="~/Content/Images/Layout/Calendar.png" />
                <text style="color: #ed145b"> Date </text>
            </div>
            <div class="tick flipContainer col-lg-8 col-md-12 col-sm-12 col-xs-12" data-did-init="handleTickInit">
                <div data-repeat="true" data-layout="horizontal fit" data-transform="preset( d, M,y) -> delay">
                    <div class="tick-group">
                        <div data-key="value" data-transform="pad(00)">
                            <span data-view="flip"></span>
                        </div>
                        <span data-key="label" data-view="text" class="tick-label"></span>
                    </div>
                </div>
            </div>
        </div>

        <br />

        <div class="row flip-date" style="display:block;">
            <div class="stats">
                <i class="fas fa-stopwatch fa-3x" style="color:#25b34b;"></i>
                <text class="text" style="color: #25b34b;"> Compte à Rebours </text><br />
            </div>
            <div id="content" class="countdownContainer" style="margin-top:2em;">
                <div id="flipContainer">
                    <div id='flip_timer'></div>
                </div>
                
            </div>
        </div>
    </div>
    <!--- second column -->

    <div class="col mainSecondColumn">
        <div class="flip-date-container" style="width:100%;margin-left:-20px;">
            <div class="row flip-date-inside">
                <div class="col-md-4 col-sm-12 col-xs-12 stats">
                    <text class="text" style="color: #e11b22;"> Potentiel </text><br /><br />
                    <text class="number"> @Model.Potentiels</text>
                </div>
                <div class="col-md-8 col-sm-12 col-xs-12" id="content">
                    @*<img id="radarImg" src="~/Content/Images/Layout/radar.png" />*@
                    <div id="circleBorder">
                        <ul class="radar">
                            <li></li>
                            <li></li>
                            <li></li>
                        </ul>
                        <div id="point0"></div>
                        <div id="point1"></div>
                        <div id="point2"></div>
                        <div id="point3"></div>
                        <div id="point4"></div>
                    </div>

                </div>
            </div>

            <br />

            <div class="row flip-date-inside">
                <div class="col-md-4 col-sm-12 col-xs-12 stats">
                    <text class="text" style="color: #fbbb29;"> Opportunités </text><br />
                    <text class="number opportunitiesPercent">@Model.Oportunites</text><text class="number"> %</text>
                </div>
                <div class="col-md-8 col-sm-12 col-xs-12" id="content">
                    <canvas class="circlee" id="oppo-circle" width="350" height="350"></canvas>
                    @*<div class="description" style="text-align: center; font-size: 30px; font-weight: 200; position: relative; color: #fff;">*@
                    <img id="canvaContent" src="~/Content/Images/ICONES_SVG_Couleurs_Opportunite╠üs.svg" />
                    @*</div>*@
                </div>
            </div>
        </div>
    </div>


</div>


<script>

    function CountdownTracker(label, value) {

        var el = document.createElement('span');

        el.className = 'flip-clock__piece';
        el.innerHTML = '<b class="flip-clock__card card"><b class="card__top"></b><b class="card__bottom"></b><b class="card__back"><b class="card__bottom"></b></b></b>' +
            '<span class="flip-clock__slot">' + label + '</span>';

        this.el = el;

        var top = el.querySelector('.card__top'),
            bottom = el.querySelector('.card__bottom'),
            back = el.querySelector('.card__back'),
            backBottom = el.querySelector('.card__back .card__bottom');

        this.update = function (val) {
            val = ('0' + val).slice(-2);
            if (val !== this.currentValue) {

                if (this.currentValue >= 0) {
                    back.setAttribute('data-value', this.currentValue);
                    bottom.setAttribute('data-value', this.currentValue);
                }
                this.currentValue = val;
                top.innerText = this.currentValue;
                backBottom.setAttribute('data-value', this.currentValue);

                this.el.classList.remove('flip');
                void this.el.offsetWidth;
                this.el.classList.add('flip');
            }
        }

        this.update(value);
    }

    function getTimeRemaining(endtime) {
        var t = Date.parse(endtime) - Date.parse(new Date());
        return {
            'Total': t,
            'Days': Math.floor(t / (1000 * 60 * 60 * 24)),
            'Hours': Math.floor((t / (1000 * 60 * 60)) % 24),
            'Minutes': Math.floor((t / 1000 / 60) % 60),
            'Seconds': Math.floor((t / 1000) % 60)
        };
    }

    function Clock(countdown, callback) {
        countdown = countdown ? new Date(Date.parse(countdown)) : false;
        callback = callback || function () { };

        var updateFn = getTimeRemaining;

        this.el = document.createElement('div');
        this.el.className = 'flip-clock';

        var trackers = {},
            t = updateFn(countdown),
            key, timeinterval;

        for (key in t) {
            if (key === 'Total') { continue; }
            trackers[key] = new CountdownTracker(key, t[key]);
            this.el.appendChild(trackers[key].el);
        }

        var i = 0;
        function updateClock() {
            timeinterval = requestAnimationFrame(updateClock);

            // throttle so it's not constantly updating the time.
            if (i++ % 10) { return; }

            var t = updateFn(countdown);
            if (t.Total < 0) {
                cancelAnimationFrame(timeinterval);
                for (key in trackers) {
                    trackers[key].update(0);
                }
                callback();
                return;
            }

            for (key in trackers) {
                trackers[key].update(t[key]);
            }
        }

        setTimeout(updateClock, 500);
    }

    //var deadline = new Date(Date.parse(new Date()) + 12 * 24 * 60 * 60 * 1000);
    var deadline = new Date(Date.parse(new Date('2021/07/10')));
    var c = new Clock(deadline, function () { /* Do something when countdouwn is complete */ });
    var page_timer = document.getElementById('flip_timer');
    page_timer.appendChild(c.el);




    $(document).ready(function () {
        var opportunities = $('.opportunitiesPercent').text();

        var oppoCanvas = document.getElementById('oppo-circle');
        var ctx = oppoCanvas.getContext('2d');
        var $canvas = $("#oppo-circle");
        var canvasOffset = $canvas.offset();
        var offsetX = canvasOffset.left;
        var offsetY = canvasOffset.top;
        var scrollX = $canvas.scrollLeft();
        var scrollY = $canvas.scrollTop();

        //Create gradient
        var yellowGradienta = ctx.createLinearGradient(0, 500, 0, 0);
        yellowGradienta.addColorStop(0, '#f5df2e');
        yellowGradienta.addColorStop(1, '#f07654');

        //Create gradient
        var yellowGradient = ctx.createLinearGradient(0, 500, 0, 0);
        yellowGradient.addColorStop(0, '#f07654');
        yellowGradient.addColorStop(1, '#f5df2e');

        var oppoCircle = {
            x: 170,
            y: 170,
            radius: 100,
            angleStartArc: 1.5 * Math.PI,
            angleEndArc: 0 * Math.PI,
            wasInside: false,
            finish: parseInt(opportunities), // Finish (in %)
            gradientColor: yellowGradienta,
            gradientaColor: yellowGradient,
            curr: 0, // Current position (in %)
            circum: Math.PI * 2
        }


        drawOppoCircle(oppoCircle, false);

        function drawOppoCircle(circle, isInside, draw_to) {
            var ctx = oppoCanvas.getContext('2d');
            ctx.clearRect(0, 0, oppoCanvas.width, oppoCanvas.height);
            //Draw circle
            ctx.beginPath();
            ctx.arc(circle.x, circle.x, circle.radius, 0, 2 * Math.PI, false);
            ctx.lineWidth = 30;
            ctx.strokeStyle = 'black';
            ctx.shadowColor = '#a57b0d';
            ctx.shadowBlur = 50;
            ctx.shadowOffsetY = 3;
            ctx.stroke();

            ctx.stroke();

            //Draw arc
            ctx.beginPath();
            ctx.arc(circle.x, circle.x, circle.radius, circle.angleStartArc, draw_to);
            ctx.strokeStyle = isInside ? circle.gradientColor : circle.gradientaColor;
            // ctx.strokeStyle =circle.gradientaColor;
            ctx.lineWidth = 30;
            ctx.lineCap = 'round';
            ctx.stroke();
            circle.wasInside = isInside;

            // Increment percent
            circle.curr++;
            // Animate until end
            if (circle.curr < circle.finish + 1) {
                // Recursive repeat this function until the end is reached
                requestAnimationFrame(function () {
                    drawOppoCircle(circle, isInside, circle.circum * circle.curr / 100 + circle.angleStartArc);
                });
            }

        }



        /**** countDown  JS  *********/

         var className ;
  
  $(".card__bottom").each(function(index, element) {
    console.log(index );
    if ( index=== 0 || index ===1 ) {
     className ="days";
    }
    else if (index=== 2 || index ===3 ){
      className = "hours";
    }
    else if (index=== 4 || index === 5){
      className = "minutes";
    }
    else{
      className = "seconds";
    }
    $( this ).addClass( className );
  });
  
  $(".card__top").each(function(index, element) {
   // console.log(index);
    if (index == 0) {
     className ="days";
    }
    else if (index == 1){
      className = "hours";
    }
    else if (index == 2){
      className = "minutes";
    }
    else{
      className = "seconds";
    }
    $( this ).addClass( className );
  });
    });


    function handleTickInit(tick) {
        var locale = {
            YEAR_PLURAL: 'ANNEES',
            YEAR_SINGULAR: 'Ans',
            MONTH_PLURAL: 'Mois',
            MONTH_SINGULAR: 'MOIS',
            WEEK_PLURAL: 'Semaines',
            WEEK_SINGULAR: 'Semaine',
            DAY_PLURAL: 'JOURS',
            DAY_SINGULAR: 'Jour',
            HOUR_PLURAL: 'Heures',
            HOUR_SINGULAR: 'Heure',
            MINUTE_PLURAL: 'Minutes',
            MINUTE_SINGULAR: 'Minute',
            SECOND_PLURAL: 'Secondes',
            SECOND_SINGULAR: 'Seconde',
            MILLISECOND_PLURAL: 'Millisecondes',
            MILLISECOND_SINGULAR: 'Milliseconde'
        };

        for (var key in locale) {
            if (!locale.hasOwnProperty(key)) { continue; }
            tick.setConstant(key, locale[key]);
        }



        var dd = Tick.helper.date();
        tick.value = [dd.getDate(), dd.getMonth() + 1, dd.getFullYear()];

    }




</script>

