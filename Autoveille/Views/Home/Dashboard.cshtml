@{
    ViewBag.Title = "Dashboard";
}
@model Autoveille.TestingModels.Dashboard
<div class="row alertRow" id="eventDiv">
    <div style="float:left;" class="col-md-6 col-sm-12 col-xs-12">
        <p class="eventText" style="color: white;">
            EVENEMENT
            <span id="eventState"> EN COURS </span>
        </p>
    </div>

    <div id="searchInput" class="eventText col-md-6 col-sm-12 col-xs-12" style="color:white;">
        NOM DU CONCESSIONNAIRE
    </div>

</div>
<br />
<br />
@*<div class="container" style="max-width: 1335px; margin: 0 auto;">
    <div class="grid-row" style="display: flex; flex-flow: row wrap; justify-content: flex-start;">
        <div style="background-color:black; border-radius:20px;" class="grid-item">

        </div>
        <div style="background-color:black; border-radius:20px;" class="grid-item">

        </div>
        <div style="background-color:black; border-radius:20px;" class="grid-item">

        </div>
        <div style="background-color:black; border-radius:20px;" class="grid-item">

        </div>
        <div style="background-color:black; border-radius:20px;" class="grid-item">

        </div>
        <div style="background-color:black; border-radius:20px;" class="grid-item">

        </div>
    </div>
    </div>*@

<div class="row mainRow">
    <div class="col" style="margin-left:35px;width:50%;">
        <div class="row flip-date">
            <div id="calendar-Label" class="col-lg-4 col-md-12 col-sm-12 col-xs-12">
                <img src="~/Content/Images/Layout/Calendar.png" />
                <text style="color: #ed145b"> Date </text>
            </div>
            <div class="tick flipContainer col-lg-8 col-md-12 col-sm-12 col-xs-12" data-did-init="handleTickInit">
                <div data-repeat="true" data-layout="horizontal fit" data-transform="preset( d, M,y) -> delay">
                    <div class="tick-group">
                        <div data-key="value" data-transform="pad(00)">
                            <span data-view="flip"></span>
                        </div>
                        <span data-key="label" data-view="text" class="tick-label"></span>
                    </div>
                </div>
            </div>
        </div>

        <br />

        <div class="row flip-date">
            <div class="col-md-4 col-sm-12 col-xs-12 stats">
                <text class="text" style="color: #25b34b;"> Rendez-vous </text><br />
                <text class="number rdvPercent"> @Model.RDV</text><text class="number"> %</text>
            </div>
            <div class="col-md-8 col-sm-12 col-xs-12" id="content">
                <canvas class="circlee" id="rendezVous-circle" width="350" height="350"></canvas>
                @*<div class="description" style="text-align: center; font-size: 30px; font-weight: 200; position: relative; color: #fff;">*@
                <img id="canvaContent" src="~/Content/Images/ICONES_SVG_Base_Couleurs_RDV.svg" />
                @*</div>*@
            </div>
        </div>

        <br />

        <div class="row flip-date">
            <div class="col-md-4 col-sm-12 col-xs-12 stats">
                <text class="text" style="color: #32b9a9;"> Walk-IN </text><br />
                <text class="number walkInPercent"> @Model.WalkIn</text><text class="number"> %</text>
            </div>
            <div class="col-md-8  col-sm-12 col-xs-12" id="content">
                <canvas class="circlee" id="walkIn-circle" width="350" height="350"></canvas>
                @*<div class="description" style="text-align: center; font-size: 30px; font-weight: 200; position: relative; color: #fff;">*@
                <img id="canvaContent" src="~/Content/Images/ICONES_SVG_Couleurs_WaklIn_Blue.svg" />
                @*</div>*@
            </div>
        </div>
    </div>


    <div class="col mainSecondColumn">
        <div class="flip-date-container" style="width:100%;margin-left:-20px;">
            <div class="row flip-date-inside">
                <div class="col-md-4 col-sm-12 col-xs-12 stats">
                    <text class="text" style="color: #e11b22;"> Potentiel </text><br /><br />
                    <text class="number"> @Model.Potentiels</text>
                </div>
                <div class="col-md-8 col-sm-12 col-xs-12" id="content">
                    @*<img id="radarImg" src="~/Content/Images/Layout/radar.png" />*@
                    <div id="circleBorder">
                        <ul class="radar">
                            <li></li>
                            <li></li>
                            <li></li>
                        </ul>
                        <div id="point0"></div>
                        <div id="point1"></div>
                        <div id="point2"></div>
                        <div id="point3"></div>
                        <div id="point4"></div>
                    </div>

                </div>
                </div>

            <br />

            <div class="row flip-date-inside">
                <div class="col-md-4 col-sm-12 col-xs-12 stats">
                    <text class="text" style="color: #fbbb29;"> Opportunités </text><br />
                    <text class="number opportunitiesPercent">@Model.Oportunites</text><text class="number"> %</text>
                </div>
                <div class="col-md-8 col-sm-12 col-xs-12" id="content">
                    <canvas class="circlee" id="oppo-circle" width="350" height="350"></canvas>
                    @*<div class="description" style="text-align: center; font-size: 30px; font-weight: 200; position: relative; color: #fff;">*@
                    <img id="canvaContent" src="~/Content/Images/ICONES_SVG_Couleurs_Opportunite╠üs.svg" />
                    @*</div>*@
                </div>
            </div>
        </div>
        <br />

        <div class="row flip-date" style="width:100%;">
            <div class="col-md-4 col-sm-12 col-xs-12 stats">
                <text class="text" style="color: #c1529e;"> Ventes </text><br />
                <text class="number ventePercent"> @Model.Ventes</text> <text class="number"> %</text>
            </div>
            <div class="col-md-8 col-sm-12 col-xs-12" id="content">
                <canvas class="circlee" id="vente-circle" width="350" height="350"></canvas>
                @*<div class="description" style="text-align: center; font-size: 30px; font-weight: 200; position: relative; color: #fff;">*@
                <img id="canvaContent" src="~/Content/Images/ICONES_SVG_Couleurs_Vente.svg" />
                @*</div>*@
            </div>
        </div>

    </div>


</div>


<script>
    var raf = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;
    window.requestAnimationFrame = raf;

    function percentageToRadians(percentage) {
        var degrees = (percentage/100) * 360;
        console.log('for ' + percentage + 'equal ' + (degrees * (Math.PI / 180)));
        var radians = degrees * (Math.PI / 180);
        return radians;
    }
    $(document).ready(function () {
        var vente = $(".ventePercent").text();
        var opportunities = $('.opportunitiesPercent').text();
        var walkIn = $('.walkInPercent').text();
        var rdvs = $('.rdvPercent').text();
        
       /*****************animation task  */
        var rdvCanvas = document.getElementById('rendezVous-circle'); 
        var ctx = rdvCanvas.getContext('2d');
        var $canvas = $("#rendezVous-circle");
        var canvasOffset = $canvas.offset();
        var offsetX = canvasOffset.left;
        var offsetY = canvasOffset.top;
        var scrollX = $canvas.scrollLeft();
        var scrollY = $canvas.scrollTop();

        //Create gradient
        var gradienta = ctx.createLinearGradient(0, 500, 0, 0);
        gradienta.addColorStop(0, '#31B8A5');
        gradienta.addColorStop(1, '#24B24A');

        //Create gradient
        var gradient = ctx.createLinearGradient(0, 500, 0, 0);
        gradient.addColorStop(0, '#24B24A');
        gradient.addColorStop(1, '#31B8A5');

        var rdvCircle = {
            x: 170,
            y: 170,
            radius: 100,
            // 0deg   - 1.5 * Pi,
            // 90deg  - 0   * Pi, 
            // 180deg - 0.5 * Pi, 
            // 270deg - 1   * Pi
            angleStartArc: 1.5 * Math.PI,
            angleEndArc: 0 * Math.PI,
            wasInside: false,
            finish: parseInt(rdvs), // Finish (in %)
            gradientColor: gradienta,
            gradientaColor: gradient,
            curr: 0, // Current position (in %)
            circum: Math.PI * 2
        }

       
        drawCircle(rdvCircle, false);

        function drawCircle(circle, isInside, draw_to) {
            var ctx = rdvCanvas.getContext('2d');
            ctx.clearRect(0, 0, rdvCanvas.width, rdvCanvas.height);
            //Draw circle
            ctx.beginPath();
            ctx.arc(circle.x, circle.x, circle.radius, 0, 2 * Math.PI, false);
            ctx.lineWidth = 30;
            ctx.strokeStyle = 'black';
            ctx.shadowColor = 'green';
            ctx.shadowBlur = 50;
            ctx.shadowOffsetY = 3;
            ctx.stroke();

            ctx.stroke();

            //Draw arc
            ctx.beginPath();
            ctx.arc(circle.x, circle.x, circle.radius, circle.angleStartArc, draw_to);
            ctx.strokeStyle = isInside ? circle.gradientColor : circle.gradientaColor;
            // ctx.strokeStyle =circle.gradientaColor;
            ctx.lineWidth = 30;
            ctx.lineCap = 'round';
            ctx.stroke();
            circle.wasInside = isInside;

            // Increment percent
            circle.curr++;
            // Animate until end
            if (circle.curr < circle.finish + 1) {
                // Recursive repeat this function until the end is reached
                requestAnimationFrame(function () {
                    drawCircle(circle, isInside, circle.circum * circle.curr / 100 + circle.angleStartArc);
                });
            }

        }

        function handleMouseMove(e) {
            e.preventDefault();
            e.stopPropagation();
            var mouseX = parseInt(e.clientX - offsetX);
            var mouseY = parseInt(e.clientY - offsetY);

            var dx = mouseX - rdvCircle.x;
            var dy = mouseY - rdvCircle.y;

            var isInside = dx * dx + dy * dy <= rdvCircle.radius * rdvCircle.radius;

            if (isInside && !rdvCircle.wasInside) {
                ctx.clearRect(0, 0, rdvCanvas.width, rdvCanvas.height);
                drawCircle(rdvCircle, isInside, rdvCircle.circum * rdvCircle.finish / 100 + rdvCircle.angleStartArc);
            } else if (!isInside && rdvCircle.wasInside) {
                ctx.clearRect(0, 0, rdvCanvas.width, rdvCanvas.height);
                drawCircle(rdvCircle, isInside, rdvCircle.circum * rdvCircle.finish / 100 + rdvCircle.angleStartArc);
            }
        }

        $("#rendezVous-circle").mousemove(function (e) {
            handleMouseMove(e);
        });

        /*********** end animation task  */


  

    //Create gradient
    /*var gradient = ctx.createLinearGradient(0, 500, 0, 0);
    gradient.addColorStop(0, '#c0e674');
    gradient.addColorStop(1, '#40d6a5');*/

    /****************** Opportunities circle canvas ******************* */
    //var canvas = document.getElementById('oppo-circle');
    //var oppoCtx = canvas.getContext('2d');
    //Create gradient
 



        var oppoCanvas = document.getElementById('oppo-circle');
        var ctx = oppoCanvas.getContext('2d');
        var $canvas = $("#oppo-circle");
        var canvasOffset = $canvas.offset();
        var offsetX = canvasOffset.left;
        var offsetY = canvasOffset.top;
        var scrollX = $canvas.scrollLeft();
        var scrollY = $canvas.scrollTop();

        //Create gradient
        var yellowGradienta = ctx.createLinearGradient(0, 500, 0, 0);
        yellowGradienta.addColorStop(0, '#f5df2e');
        yellowGradienta.addColorStop(1, '#f07654');

        //Create gradient
        var yellowGradient = ctx.createLinearGradient(0, 500, 0, 0);
        yellowGradient.addColorStop(0, '#f07654');
        yellowGradient.addColorStop(1, '#f5df2e');

        var oppoCircle = {
            x: 170,
            y: 170,
            radius: 100,
            angleStartArc: 1.5 * Math.PI,
            angleEndArc: 0 * Math.PI,
            wasInside: false,
            finish: parseInt(opportunities), // Finish (in %)
            gradientColor: yellowGradienta,
            gradientaColor: yellowGradient,
            curr: 0, // Current position (in %)
            circum: Math.PI * 2
        }


        drawOppoCircle(oppoCircle, false);

        function drawOppoCircle(circle, isInside, draw_to) {
            var ctx = oppoCanvas.getContext('2d');
            ctx.clearRect(0, 0, oppoCanvas.width, oppoCanvas.height);
            //Draw circle
            ctx.beginPath();
            ctx.arc(circle.x, circle.x, circle.radius, 0, 2 * Math.PI, false);
            ctx.lineWidth = 30;
            ctx.strokeStyle = 'black';
            ctx.shadowColor = '#a57b0d';
            ctx.shadowBlur = 50;
            ctx.shadowOffsetY = 3;
            ctx.stroke();

            ctx.stroke();

            //Draw arc
            ctx.beginPath();
            ctx.arc(circle.x, circle.x, circle.radius, circle.angleStartArc, draw_to);
            ctx.strokeStyle = isInside ? circle.gradientColor : circle.gradientaColor;
            // ctx.strokeStyle =circle.gradientaColor;
            ctx.lineWidth = 30;
            ctx.lineCap = 'round';
            ctx.stroke();
            circle.wasInside = isInside;

            // Increment percent
            circle.curr++;
            // Animate until end
            if (circle.curr < circle.finish + 1) {
                // Recursive repeat this function until the end is reached
                requestAnimationFrame(function () {
                    drawOppoCircle(circle, isInside, circle.circum * circle.curr / 100 + circle.angleStartArc);
                });
            }

        }











    //Draw circle
    //oppoCtx.beginPath();
    //oppoCtx.arc(x, x, radius, 0, 2 * Math.PI, false);
    //oppoCtx.lineWidth = 40;
    //oppoCtx.shadowColor = '#f39f86';
    //oppoCtx.shadowBlur = 50;
    //oppoCtx.shadowOffsetY = 3;
    //oppoCtx.stroke();


    //Draw arc
    //oppoCtx.beginPath();
    //    oppoCtx.arc(x, y, radius, angleStart, angleStart + percentageToRadians(opportunities));
    //oppoCtx.strokeStyle = yellowGradient;
    //oppoCtx.lineWidth = 40;
    //oppoCtx.lineCap = 'round';
    //oppoCtx.stroke();


    /**********WALK iN CIRCLE  */





        var walkInCanvas = document.getElementById('walkIn-circle');
        var ctx = walkInCanvas.getContext('2d');
        var $canvas = $("#walkIn-circle");
        var canvasOffset = $canvas.offset();
        var offsetX = canvasOffset.left;
        var offsetY = canvasOffset.top;

        //Create gradient
        var blueGradienta = ctx.createLinearGradient(0, 500, 0, 0);
        blueGradienta.addColorStop(0, '#31B8A8');
        blueGradienta.addColorStop(0.5, '#31B6B1');
        blueGradienta.addColorStop(1, '#2DA6DB');
        //Create gradient
        var blueGradient = ctx.createLinearGradient(0, 500, 0, 0);
        blueGradient.addColorStop(0, '#2DA6DB');
        blueGradient.addColorStop(0.5, '#31B6B1');
        blueGradient.addColorStop(1, '#31B8A8');

        var oppoCircle = {
            x: 170,
            y: 170,
            radius: 100,
            angleStartArc: 1.5 * Math.PI,
            angleEndArc: 0 * Math.PI,
            wasInside: false,
            finish: parseInt(walkIn), // Finish (in %)
            gradientColor: blueGradient,
            gradientaColor: blueGradient,
            curr: 0, // Current position (in %)
            circum: Math.PI * 2
        }


        drawWalkInCircle(oppoCircle, false);

        function drawWalkInCircle(circle, isInside, draw_to) {
            var ctx = walkInCanvas.getContext('2d');
            ctx.clearRect(0, 0, walkInCanvas.width, walkInCanvas.height);
            //Draw circle
            ctx.beginPath();
            ctx.arc(circle.x, circle.x, circle.radius, 0, 2 * Math.PI, false);
            ctx.lineWidth = 30;
            ctx.strokeStyle = 'black';
            ctx.shadowColor = '#09c6f9';
            ctx.shadowBlur = 50;
            ctx.shadowOffsetY = 3;
            ctx.stroke();

            ctx.stroke();

            //Draw arc
            ctx.beginPath();
            ctx.arc(circle.x, circle.x, circle.radius, circle.angleStartArc, draw_to);
            ctx.strokeStyle = isInside ? circle.gradientColor : circle.gradientaColor;
            // ctx.strokeStyle =circle.gradientaColor;
            ctx.lineWidth = 30;
            ctx.lineCap = 'round';
            ctx.stroke();
            circle.wasInside = isInside;

            // Increment percent
            circle.curr++;
            // Animate until end
            if (circle.curr < circle.finish + 1) {
                // Recursive repeat this function until the end is reached
                requestAnimationFrame(function () {
                    drawWalkInCircle(circle, isInside, circle.circum * circle.curr / 100 + circle.angleStartArc);
                });
            }

        }



   /* var canvas = document.getElementById('walkIn-circle');

    var walkInCtx = canvas.getContext('2d');
    //Create gradient
    var blueGradient = ctx.createLinearGradient(0, 500, 0, 0);
    blueGradient.addColorStop(0, '#32B9A9');
    blueGradient.addColorStop(1, '#32B9A9');


    //Draw circle
    walkInCtx.beginPath();
    walkInCtx.arc(x, x, radius, 0, 2 * Math.PI, false);
    walkInCtx.lineWidth = 40;
    walkInCtx.shadowColor = '#09c6f9';
    walkInCtx.shadowBlur = 50;
    walkInCtx.shadowOffsetY = 3;
    walkInCtx.stroke();


    //Draw arc
    walkInCtx.beginPath();
    walkInCtx.arc(x, y, radius, angleStart, angleStart + percentageToRadians(walkIn));
    walkInCtx.strokeStyle = blueGradient;
    walkInCtx.lineWidth = 40;
    walkInCtx.lineCap = 'round';
    walkInCtx.stroke();*/















    /******************sales circle **********/

        var venteCanvas = document.getElementById('vente-circle');
        var ctx = venteCanvas.getContext('2d');
        var $canvas = $("#vente-circle");
        var canvasOffset = $canvas.offset();
        var offsetX = canvasOffset.left;
        var offsetY = canvasOffset.top;

        //Create gradient
        var purpleGradienta = ctx.createLinearGradient(0, 500, 0, 0);
        purpleGradienta.addColorStop(0, '#861657');
        purpleGradienta.addColorStop(1, '#ffa69e');

        //Create gradient
        var purpleGradient = ctx.createLinearGradient(0, 500, 0, 0);
        purpleGradient.addColorStop(0, '#ffa69e');
        purpleGradient.addColorStop(1, '#861657');

        var venteCircle = {
            x: 170,
            y: 170,
            radius: 100,
            angleStartArc: 1.5 * Math.PI,
            angleEndArc: 0 * Math.PI,
            wasInside: false,
            finish: parseInt(vente), // Finish (in %)
            gradientColor: purpleGradient,
            gradientaColor: purpleGradient,
            curr: 0, // Current position (in %)
            circum: Math.PI * 2
        }


        drawVenteCircle(venteCircle, false);

        function drawVenteCircle(circle, isInside, draw_to) {
            var ctx = venteCanvas.getContext('2d');
            ctx.clearRect(0, 0, venteCanvas.width, venteCanvas.height);
            //Draw circle
            ctx.beginPath();
            ctx.arc(circle.x, circle.x, circle.radius, 0, 2 * Math.PI, false);
            ctx.lineWidth = 30;
            ctx.strokeStyle = 'black';
            ctx.shadowColor = '#a4508b';
            ctx.shadowBlur = 50;
            ctx.shadowOffsetY = 3;
            ctx.stroke();

            ctx.stroke();

            //Draw arc
            ctx.beginPath();
            ctx.arc(circle.x, circle.x, circle.radius, circle.angleStartArc, draw_to);
            ctx.strokeStyle = isInside ? circle.gradientColor : circle.gradientaColor;
            // ctx.strokeStyle =circle.gradientaColor;
            ctx.lineWidth = 30;
            ctx.lineCap = 'round';
            ctx.stroke();
            circle.wasInside = isInside;

            // Increment percent
            circle.curr++;
            // Animate until end
            if (circle.curr < circle.finish + 1) {
                // Recursive repeat this function until the end is reached
                requestAnimationFrame(function () {
                    drawVenteCircle(circle, isInside, circle.circum * circle.curr / 100 + circle.angleStartArc);
                });
            }

        }













   /* var canvas = document.getElementById('vente-circle');

    var venteCtx = canvas.getContext('2d');
    //Create gradient
    var purpleGradient = ctx.createLinearGradient(0, 500, 0, 0);
    purpleGradient.addColorStop(0, '#ffa69e');
    purpleGradient.addColorStop(1, '#861657');


    //Draw circle
    venteCtx.beginPath();
    venteCtx.arc(x, x, radius, 0, 2 * Math.PI, false);
    venteCtx.lineWidth = 40;
    venteCtx.shadowColor = '#a4508b';
    venteCtx.shadowBlur = 50;
    venteCtx.shadowOffsetY = 3;
    venteCtx.stroke();


    //Draw arc
    venteCtx.beginPath();
        venteCtx.arc(x, y, radius, angleStart, angleStart + percentageToRadians(vente));
    venteCtx.strokeStyle = purpleGradient;
    venteCtx.lineWidth = 40;
    venteCtx.lineCap = 'round';
    venteCtx.stroke();


*/

        console.log(vente)
        console.log(opportunities);
        console.log(walkIn);
        console.log(typeof(rdvs));
    });




    //var canvaas = document.getElementById("barChart");
    //var cttx = canvaas.getContext('2d');

    // Global Options:
    //Chart.defaults.global.defaultFontColor = 'dodgerblue';
    //Chart.defaults.global.defaultFontSize = 16;

    // Data with datasets options
    //var data = {
    //    labels: ["Vanilla", "Chocolate", "Strawberry"],
    //    datasets: [
    //        {
    //            label: "Ice Cream Prices ",
    //            fill: true,
    //            backgroundColor: [
    //                'moccasin',
    //                'saddlebrown',
    //                'lightpink'],
    //            data: [11, 9, 4]
    //        }
    //    ]
    //};

    //var options = {
    //    tooltips: {
    //        callbacks: {
    //            label: function (tooltipItem) {
    //                return "$" + Number(tooltipItem.yLabel) + " and so worth it !";
    //            }
    //        }
    //    },
    //    title: {
    //        display: true,
    //        text: 'Ice Cream Truck',
    //        position: 'bottom'
    //    },

    //    scales: {
    //        yAxes: [{
    //            ticks: {
    //                beginAtZero: true
    //            }
    //        }]
    //    }
    //};

    // Chart declaration:
    //var myBarChart = new Chart(cttx, {
    //    type: 'bar',
    //    data: data,
    //    options: options
    //});





    //Flip Date script
    function handleTickInit(tick) {
        // set language
        var locale = {
            YEAR_PLURAL: 'ANNEES',
            YEAR_SINGULAR: 'Ans',
            MONTH_PLURAL: 'Mois',
            MONTH_SINGULAR: 'MOIS',
            WEEK_PLURAL: 'Semaines',
            WEEK_SINGULAR: 'Semaine',
            DAY_PLURAL: 'JOURS',
            DAY_SINGULAR: 'Jour',
            HOUR_PLURAL: 'Heures',
            HOUR_SINGULAR: 'Heure',
            MINUTE_PLURAL: 'Minutes',
            MINUTE_SINGULAR: 'Minute',
            SECOND_PLURAL: 'Secondes',
            SECOND_SINGULAR: 'Seconde',
            MILLISECOND_PLURAL: 'Millisecondes',
            MILLISECOND_SINGULAR: 'Milliseconde'
        };

        for (var key in locale) {
            if (!locale.hasOwnProperty(key)) { continue; }
            tick.setConstant(key, locale[key]);
        }



        var dd = Tick.helper.date();
        console.log(dd);
        tick.value = [dd.getDate(), dd.getMonth() + 1, dd.getFullYear()];
        // console.log(tick.value);

    }
</script>
